import os
import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    filters
)
from pdf2image import convert_from_bytes
from PIL import Image
import cv2
import numpy as np
from io import BytesIO
from PyPDF2 import PdfReader, PdfWriter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8013070807:AAFwDMOWX1qI11rPAbADZvaxx_5YahIGr_U"
DB_NAME = "pdf_bot.db"
OUTPUT_FOLDER = "processed_pdfs"
PREVIEW_PAGES = 5
PRICE = 100  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤ Stars
STARS_ADD_AMOUNT = 100  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SETTINGS = {
    'thickness': 3,
    'bg_color': (255, 255, 255),
    'ink_color': (0, 0, 0),
    'remove_bg': True,
    'contrast': 3.0
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
os.makedirs(OUTPUT_FOLDER, exist_ok=True)
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY, 
                      username TEXT,
                      balance INTEGER DEFAULT 50)''')
    conn.commit()
    conn.close()

init_db()

# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def parse_color(color_str):
    color_map = {
        'white': (255, 255, 255),
        'black': (0, 0, 0),
        'blue': (0, 0, 255),
        'red': (255, 0, 0),
        'green': (0, 128, 0),
        'beige': (245, 245, 220),
        'light_pink': (255, 230, 230),
        'purple': (128, 0, 128)
    }

    if color_str.startswith('#'):
        return tuple(int(color_str[i:i + 2], 16) for i in (1, 3, 5))
    return color_map.get(color_str.lower(), (0, 0, 0))

def enhance_image(image, settings):
    img = np.array(image)
    gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY) if len(img.shape) == 3 else img

    enhanced = cv2.convertScaleAbs(gray, alpha=settings['contrast'], beta=0)
    _, binary = cv2.threshold(enhanced, 220, 255, cv2.THRESH_BINARY_INV)

    kernel = np.ones((settings['thickness'], settings['thickness']), np.uint8)
    thickened = cv2.dilate(binary, kernel, iterations=1)

    smoothed = cv2.GaussianBlur(thickened, (3, 3), 0)
    _, smoothed = cv2.threshold(smoothed, 100, 255, cv2.THRESH_BINARY)

    h, w = smoothed.shape
    if settings['remove_bg']:
        background = np.full((h, w, 3), settings['bg_color'], dtype=np.uint8)
    else:
        background = cv2.cvtColor(255 - binary, cv2.COLOR_GRAY2BGR)

    result = np.where(smoothed[..., None] == 255, settings['ink_color'], background)
    return Image.fromarray(result.astype('uint8'))

async def process_pdf(pdf_bytes, settings, preview=False):
    images = convert_from_bytes(
        pdf_bytes.getvalue(),
        first_page=1,
        last_page=PREVIEW_PAGES if preview else None,
        dpi=300
    )

    processed_images = []
    for img in images:
        processed_images.append(enhance_image(img, settings))

    output = BytesIO()
    if len(processed_images) > 1:
        processed_images[0].save(
            output, format="PDF",
            save_all=True,
            append_images=processed_images[1:]
        )
    else:
        processed_images[0].save(output, format="PDF")

    output.seek(0)
    return output


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu_keyboard(user_id=None):
    buttons = []

    if user_id:
        conn = sqlite3.connect(DB_NAME)
        balance = conn.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)).fetchone()[0]
        conn.close()
        buttons.append([InlineKeyboardButton(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} Stars", callback_data="show_balance")])

    buttons.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", callback_data="open_settings")])
    buttons.append([InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_main")])

    return InlineKeyboardMarkup(buttons)

def get_settings_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üî¢ –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π", callback_data="set_thickness")],
        [InlineKeyboardButton("üé® –¶–≤–µ—Ç —Ñ–æ–Ω–∞", callback_data="set_bg_color")],
        [InlineKeyboardButton("‚úíÔ∏è –¶–≤–µ—Ç —á–µ—Ä–Ω–∏–ª", callback_data="set_ink_color")],
        [InlineKeyboardButton("üßπ –£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω: –î–∞", callback_data="toggle_bg")],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"),
            InlineKeyboardButton("üëÄ –ü—Ä–µ–≤—å—é", callback_data="send_preview")
        ]
    ])

def get_thickness_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–¢–æ–Ω–∫–∏–µ (1)", callback_data="thickness_1")],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–µ (3)", callback_data="thickness_3")],
        [InlineKeyboardButton("–¢–æ–ª—Å—Ç—ã–µ (5)", callback_data="thickness_5")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
    ])

def get_color_keyboard(color_type):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ö™ –ë–µ–ª—ã–π", callback_data=f"{color_type}_white")],
        [InlineKeyboardButton("‚ö´ –ß–µ—Ä–Ω—ã–π", callback_data=f"{color_type}_black")],
        [InlineKeyboardButton("üîµ –°–∏–Ω–∏–π", callback_data=f"{color_type}_blue")],
        [InlineKeyboardButton("üî¥ –ö—Ä–∞—Å–Ω—ã–π", callback_data=f"{color_type}_red")],
        [InlineKeyboardButton("üü¢ –ó–µ–ª–µ–Ω—ã–π", callback_data=f"{color_type}_green")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
    ])


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    conn = sqlite3.connect(DB_NAME)
    conn.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",
                 (user.id, user.username))
    conn.commit()
    conn.close()

    context.user_data['settings'] = DEFAULT_SETTINGS.copy()

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\n\n"
        f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: –ø—Ä–µ–≤—å—é {PREVIEW_PAGES} —Å—Ç—Ä–∞–Ω–∏—Ü\n"
        f"‚Ä¢ –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è: {PRICE} Stars",
        reply_markup=get_main_menu_keyboard(user.id)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–í –Ω–∞—á–∞–ª–æ"
async def handle_back_to_main(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await query.edit_message_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
        reply_markup=get_main_menu_keyboard(query.from_user.id)
    )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def handle_settings(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "open_settings":
        await query.edit_message_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
            reply_markup=get_settings_keyboard()
        )
    elif query.data == "set_thickness":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –ª–∏–Ω–∏–π:",
            reply_markup=get_thickness_keyboard()
        )
    elif query.data == "set_bg_color":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞:",
            reply_markup=get_color_keyboard("bg")
        )
    elif query.data == "set_ink_color":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —á–µ—Ä–Ω–∏–ª:",
            reply_markup=get_color_keyboard("ink")
        )
    elif query.data == "toggle_bg":
        context.user_data['settings']['remove_bg'] = not context.user_data['settings']['remove_bg']
        status = "–î–∞" if context.user_data['settings']['remove_bg'] else "–ù–µ—Ç"
        await query.edit_message_text(
            text=f"üßπ –£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω: {status}",
            reply_markup=get_settings_keyboard()
        )
    elif query.data.startswith("thickness_"):
        thickness = int(query.data.split("_")[1])
        context.user_data['settings']['thickness'] = thickness
        await query.edit_message_text(
            text=f"üî¢ –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π: {thickness}",
            reply_markup=get_settings_keyboard()
        )
    elif query.data.startswith(("bg_", "ink_")):
        color_type, color = query.data.split("_")
        color_rgb = parse_color(color)

        if color_type == "bg":
            context.user_data['settings']['bg_color'] = color_rgb
            await query.edit_message_text(
                text=f"üé® –¶–≤–µ—Ç —Ñ–æ–Ω–∞: {color}",
                reply_markup=get_settings_keyboard()
            )
        else:
            context.user_data['settings']['ink_color'] = color_rgb
            await query.edit_message_text(
                text=f"‚úíÔ∏è –¶–≤–µ—Ç —á–µ—Ä–Ω–∏–ª: {color}",
                reply_markup=get_settings_keyboard()
            )
    elif query.data == "back_to_main":
        await handle_back_to_main(update, context)
    elif query.data == "send_preview":
        await query.edit_message_text("‚è≥ –ì–æ—Ç–æ–≤–ª—é –ø—Ä–µ–≤—å—é...")

        try:
            preview = await process_pdf(
                context.user_data['pdf_bytes'],
                context.user_data['settings'],
                preview=True
            )

            await context.bot.send_document(
                chat_id=query.from_user.id,
                document=preview,
                filename=f"preview_{context.user_data['filename']}"
            )

            await context.bot.send_message(
                chat_id=query.from_user.id,
                text=f"üîç –ü—Ä–µ–≤—å—é –ø–µ—Ä–≤—ã—Ö {PREVIEW_PAGES} —Å—Ç—Ä–∞–Ω–∏—Ü\n",
                reply_markup=get_main_menu_keyboard(query.from_user.id)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–≤—å—é.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_settings, pattern="^open_settings$"))
    app.add_handler(CallbackQueryHandler(handle_back_to_main, pattern="^back_to_main$"))
    app.add_handler(CallbackQueryHandler(handle_settings))

    app.run_polling()

if __name__ == "__main__":
    main()