import os
import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    filters
)
from pdf2image import convert_from_bytes
from PIL import Image
import cv2
import numpy as np
from io import BytesIO
import tempfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8013070807:AAFwDMOWX1qI11rPAbADZvaxx_5YahIGr_U"
DB_NAME = "pdf_bot.db"
OUTPUT_FOLDER = "processed_pdfs"
PREVIEW_PAGES = 5
PRICE = 100  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤ Stars
STARS_ADD_AMOUNT = 100  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SETTINGS = {
    'thickness': 2,
    'bg_color': (255, 255, 255),
    'ink_color': (0, 0, 0),
    'contrast': 3.0
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY,
                      username TEXT,
                      balance INTEGER DEFAULT 50)''')


def get_user_balance(user_id: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_NAME) as conn:
        return conn.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)).fetchone()[0]


def update_user_balance(user_id: int, amount: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        conn.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))


def process_image_page(img: Image, settings: dict) -> Image:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    img_np = np.array(img)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
    gray = cv2.cvtColor(img_np, cv2.COLOR_RGB2GRAY)

    # –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
    enhanced = cv2.convertScaleAbs(gray, alpha=settings['contrast'], beta=0)

    # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
    _, binary = cv2.threshold(enhanced, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

    # –£—Ç–æ–ª—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    kernel = np.ones((settings['thickness'], settings['thickness']), np.uint8)
    processed = cv2.dilate(binary, kernel, iterations=1)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result = np.full_like(img_np, settings['bg_color'])
    result[processed == 255] = settings['ink_color']

    return Image.fromarray(result)


async def process_pdf_file(pdf_bytes: BytesIO, settings: dict, pages: int = None) -> BytesIO:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞"""
    with tempfile.NamedTemporaryFile(suffix=".pdf") as temp_pdf:
        temp_pdf.write(pdf_bytes.getvalue())
        temp_pdf.flush()

        images = convert_from_bytes(
            pdf_bytes.getvalue(),
            first_page=1,
            last_page=pages,
            fmt='jpeg'
        )

    processed_images = [process_image_page(img, settings) for img in images]

    output = BytesIO()
    if len(processed_images) > 1:
        processed_images[0].save(
            output, format="PDF",
            save_all=True,
            append_images=processed_images[1:],
            quality=100
        )
    else:
        processed_images[0].save(output, format="PDF", quality=100)

    output.seek(0)
    return output


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    balance = get_user_balance(user_id)
    buttons = [
        [InlineKeyboardButton(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} Stars", callback_data="balance")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(buttons)


def settings_keyboard() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    buttons = [
        [InlineKeyboardButton("üî¢ –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π", callback_data="set_thickness")],
        [InlineKeyboardButton("üé® –¶–≤–µ—Ç —Ñ–æ–Ω–∞", callback_data="set_bg_color")],
        [InlineKeyboardButton("‚úíÔ∏è –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞", callback_data="set_text_color")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(buttons)


def thickness_keyboard() -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä —Ç–æ–ª—â–∏–Ω—ã –ª–∏–Ω–∏–π"""
    buttons = [
        [InlineKeyboardButton("–¢–æ–Ω–∫–∏–µ (1)", callback_data="thickness_1")],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–µ (2)", callback_data="thickness_2")],
        [InlineKeyboardButton("–¢–æ–ª—Å—Ç—ã–µ (3)", callback_data="thickness_3")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
    ]
    return InlineKeyboardMarkup(buttons)


def color_keyboard(color_type: str) -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞"""
    buttons = [
        [InlineKeyboardButton("‚ö™ –ë–µ–ª—ã–π", callback_data=f"{color_type}_white")],
        [InlineKeyboardButton("‚ö´ –ß–µ—Ä–Ω—ã–π", callback_data=f"{color_type}_black")],
        [InlineKeyboardButton("üîµ –°–∏–Ω–∏–π", callback_data=f"{color_type}_blue")],
        [InlineKeyboardButton("üî¥ –ö—Ä–∞—Å–Ω—ã–π", callback_data=f"{color_type}_red")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
    ]
    return InlineKeyboardMarkup(buttons)


def payment_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
    balance = get_user_balance(user_id)
    buttons = [
        [InlineKeyboardButton(f"‚≠ê –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é ({PRICE} Stars)", callback_data="buy_full")],
        [InlineKeyboardButton(f"üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (+100 Stars)", callback_data="add_stars")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(buttons)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    update_user_balance(user.id, 0)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –≤–∞—à–∏—Ö PDF.\n\n"
        f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: –ø—Ä–µ–≤—å—é –ø–µ—Ä–≤—ã—Ö {PREVIEW_PAGES} —Å—Ç—Ä–∞–Ω–∏—Ü\n"
        f"‚Ä¢ –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è: {PRICE} Stars\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard(user.id)
    )


async def handle_document(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ PDF"""
    user = update.effective_user
    document = update.message.document

    if document.file_size > MAX_FILE_SIZE:
        await update.message.reply_text(
            "üìÅ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50 –ú–ë).\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–±–∏—Ç—å PDF –Ω–∞ —á–∞—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é:\n"
            "‚Ä¢ –û–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å–∞: https://www.ilovepdf.com/split_pdf\n"
            "‚Ä¢ –ò–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã: Adobe Acrobat, PDFsam\n\n"
            "–ü–æ—Å–ª–µ —Ä–∞–∑–±–∏–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É.",
            reply_markup=main_menu_keyboard(user.id)
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    file = await document.get_file()
    pdf_bytes = BytesIO()
    await file.download_to_memory(out=pdf_bytes)
    context.user_data['pdf'] = pdf_bytes
    context.user_data['filename'] = document.file_name

    await update.message.reply_text(
        "–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üëÄ –ü—Ä–µ–≤—å—é (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="preview")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")]
        ])
    )


async def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "settings":
        await query.edit_message_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
            reply_markup=settings_keyboard())

    elif query.data == "balance":
        balance = get_user_balance(user_id)
        await query.edit_message_text(
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} Stars\n\n"
            f"–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF: {PRICE} Stars",
            reply_markup=payment_keyboard(user_id))

    elif query.data == "preview":
        await query.edit_message_text("‚è≥ –ì–æ—Ç–æ–≤–ª—é –ø—Ä–µ–≤—å—é...")

        try:
            preview_pdf = await process_pdf_file(
                context.user_data['pdf'],
                DEFAULT_SETTINGS,
                PREVIEW_PAGES
            )

            await context.bot.send_document(
                chat_id=user_id,
                document=preview_pdf,
                filename=f"preview_{context.user_data['filename']}"
            )

            await query.edit_message_text(
                f"üîç –ü—Ä–µ–≤—å—é –ø–µ—Ä–≤—ã—Ö {PREVIEW_PAGES} —Å—Ç—Ä–∞–Ω–∏—Ü\n\n"
                f"–î–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω—É–∂–Ω–æ {PRICE} Stars",
                reply_markup=payment_keyboard(user_id))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–≤—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.",
                reply_markup=main_menu_keyboard(user_id))

    elif query.data == "buy_full":
        balance = get_user_balance(user_id)

        if balance >= PRICE:
            update_user_balance(user_id, -PRICE)
            await query.edit_message_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é...")

            try:
                full_pdf = await process_pdf_file(
                    context.user_data['pdf'],
                    DEFAULT_SETTINGS
                )

                await context.bot.send_document(
                    chat_id=user_id,
                    document=full_pdf,
                    filename=f"enhanced_{context.user_data['filename']}"
                )

                await query.edit_message_text(
                    f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–ø–∏—Å–∞–Ω–æ {PRICE} Stars\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance - PRICE} Stars\n\n"
                    "–ù–∞–ø–∏—à–∏—Ç–µ /start –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å –µ—â—ë!",
                    reply_markup=main_menu_keyboard(user_id))

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.",
                    reply_markup=main_menu_keyboard(user_id))

        else:
            await query.edit_message_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars. –ù—É–∂–Ω–æ {PRICE}, —É –≤–∞—Å {balance}",
                reply_markup=payment_keyboard(user_id))

    elif query.data == "add_stars":
        update_user_balance(user_id, 100)
        await query.edit_message_text(
            "‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100 Stars!",
            reply_markup=payment_keyboard(user_id))

    elif query.data.startswith("thickness_"):
        thickness = int(query.data.split("_")[1])
        DEFAULT_SETTINGS['thickness'] = thickness
        await query.edit_message_text(
            f"üî¢ –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {thickness}",
            reply_markup=settings_keyboard())

    elif query.data.startswith(("bg_", "text_")):
        color_type, color = query.data.split("_")
        color_map = {
            'white': (255, 255, 255),
            'black': (0, 0, 0),
            'blue': (0, 0, 255),
            'red': (255, 0, 0)
        }

        if color_type == "bg":
            DEFAULT_SETTINGS['bg_color'] = color_map[color]
            await query.edit_message_text(
                f"üé® –¶–≤–µ—Ç —Ñ–æ–Ω–∞: {color}",
                reply_markup=settings_keyboard())
        else:
            DEFAULT_SETTINGS['ink_color'] = color_map[color]
            await query.edit_message_text(
                f"‚úíÔ∏è –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: {color}",
                reply_markup=settings_keyboard())

    elif query.data == "back_to_settings":
        await query.edit_message_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
            reply_markup=settings_keyboard())

    elif query.data == "back_to_main":
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard(user_id))

    elif query.data == "help":
        await query.edit_message_text(
            "‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª —Å —Ä—É–∫–æ–ø–∏—Å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º\n"
            "2. –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–µ–≤—å—é –ø–µ—Ä–≤—ã—Ö 5 —Å—Ç—Ä–∞–Ω–∏—Ü\n"
            "3. –î–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è Stars\n\n"
            "–°–æ–≤–µ—Ç—ã:\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50 –ú–ë\n"
            "‚Ä¢ –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://www.ilovepdf.com/split_pdf\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_menu_keyboard(user_id))


async def text_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.lower()

    if text in ['–ø—Ä–∏–≤–µ—Ç', 'start', '–Ω–∞—á–∞—Ç—å', '–º–µ–Ω—é']:
        await start(update, context)
    else:
        await update.message.reply_text(
            "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã –∏ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard(update.effective_user.id))


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    init_db()

    app = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.Document.PDF, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()


if __name__ == "__main__":
    main()