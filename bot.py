import os
import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    filters
)
from pdf2image import convert_from_bytes
from PIL import Image
import cv2
import numpy as np
from io import BytesIO
import tempfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
DB_NAME = "pdf_bot.db"
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 MB
PREVIEW_PAGES = 5
PRICE = 100  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤ Stars

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SETTINGS = {
    'thickness': 2,
    'bg_color': (255, 255, 255),
    'ink_color': (0, 0, 0),
    'contrast': 3.0
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY,
                      username TEXT,
                      balance INTEGER DEFAULT 50)''')


def get_user_balance(user_id: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_NAME) as conn:
        return conn.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)).fetchone()[0]


def update_user_balance(user_id: int, amount: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        conn.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))


def process_image_page(img: Image, settings: dict) -> Image:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    img_np = np.array(img)
    gray = cv2.cvtColor(img_np, cv2.COLOR_RGB2GRAY)
    enhanced = cv2.convertScaleAbs(gray, alpha=settings['contrast'], beta=0)
    _, binary = cv2.threshold(enhanced, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
    kernel = np.ones((settings['thickness'], settings['thickness']), np.uint8)
    processed = cv2.dilate(binary, kernel, iterations=1)
    result = np.full_like(img_np, settings['bg_color'])
    result[processed == 255] = settings['ink_color']
    return Image.fromarray(result)


async def process_pdf_file(pdf_bytes: BytesIO, settings: dict, pages: int = None) -> BytesIO:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞"""
    with tempfile.NamedTemporaryFile(suffix=".pdf") as temp_pdf:
        temp_pdf.write(pdf_bytes.getvalue())
        temp_pdf.flush()
        images = convert_from_bytes(pdf_bytes.getvalue(), first_page=1, last_page=pages, fmt='jpeg')

    processed_images = [process_image_page(img, settings) for img in images]
    output = BytesIO()
    if len(processed_images) > 1:
        processed_images[0].save(output, format="PDF", save_all=True, append_images=processed_images[1:], quality=100)
    else:
        processed_images[0].save(output, format="PDF", quality=100)
    output.seek(0)
    return output


def get_start_processing_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É'"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", callback_data="start_processing")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ])


async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    update_user_balance(user.id, 0)

    if 'pdf' in context.user_data:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π PDF, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
        await update.message.reply_text(
            "–£ –≤–∞—Å –µ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É?",
            reply_markup=get_start_processing_keyboard()
        )
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª —Å —Ä—É–∫–æ–ø–∏—Å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.\n\n"
            f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: –ø—Ä–µ–≤—å—é –ø–µ—Ä–≤—ã—Ö {PREVIEW_PAGES} —Å—Ç—Ä–∞–Ω–∏—Ü\n"
            f"‚Ä¢ –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è: {PRICE} Stars",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
                [InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help")]
            ])
        )


async def handle_document(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ PDF"""
    user = update.effective_user
    document = update.message.document

    if document.file_size > MAX_FILE_SIZE:
        await update.message.reply_text(
            "üìÅ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50 –ú–ë).\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–±–∏—Ç—å PDF –Ω–∞ —á–∞—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é:\n"
            "‚Ä¢ –û–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å–∞: https://www.ilovepdf.com/split_pdf\n"
            "‚Ä¢ –ò–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã: Adobe Acrobat, PDFsam\n\n"
            "–ü–æ—Å–ª–µ —Ä–∞–∑–±–∏–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="start")]
            ])
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    file = await document.get_file()
    pdf_bytes = BytesIO()
    await file.download_to_memory(out=pdf_bytes)
    context.user_data['pdf'] = pdf_bytes
    context.user_data['filename'] = document.file_name

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
    await update.message.reply_text(
        "‚úÖ PDF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É:",
        reply_markup=get_start_processing_keyboard()
    )


async def start_processing(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if 'pdf' not in context.user_data:
        await query.edit_message_text(
            "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="start")]
            )
        )
        return

    await query.edit_message_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    try:
        # –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –ø—Ä–µ–≤—å—é
        preview_pdf = await process_pdf_file(
            context.user_data['pdf'],
            DEFAULT_SETTINGS,
            PREVIEW_PAGES
        )

        await context.bot.send_document(
            chat_id=user_id,
            document=preview_pdf,
            filename=f"preview_{context.user_data['filename']}"
        )

        # –ó–∞—Ç–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é
        balance = get_user_balance(user_id)
        await query.edit_message_text(
            f"üîç –ü—Ä–µ–≤—å—é –ø–µ—Ä–≤—ã—Ö {PREVIEW_PAGES} —Å—Ç—Ä–∞–Ω–∏—Ü –≥–æ—Ç–æ–≤–æ!\n\n"
            f"–î–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω—É–∂–Ω–æ {PRICE} Stars\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} Stars",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"‚≠ê –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é ({PRICE} Stars)", callback_data="buy_full")],
                [InlineKeyboardButton("üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (+100 Stars)", callback_data="add_stars")],
                [InlineKeyboardButton("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª", callback_data="start")]
            ])
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="start")]
            )
        )

        async

        def button_handler(update: Update, context: CallbackContext):

            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        if query.data == "start_processing":
            await start_processing(update, context)

        elif query.data == "settings":
            await query.edit_message_text(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üî¢ –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π", callback_data="set_thickness")],
                    [InlineKeyboardButton("üé® –¶–≤–µ—Ç —Ñ–æ–Ω–∞", callback_data="set_bg_color")],
                    [InlineKeyboardButton("‚úíÔ∏è –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞", callback_data="set_text_color")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
                ])
            )

        elif query.data == "balance":
            balance = get_user_balance(user_id)
            await query.edit_message_text(
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} Stars\n\n"
                f"–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF: {PRICE} Stars",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(f"‚≠ê –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é ({PRICE} Stars)", callback_data="buy_full")],
                    [InlineKeyboardButton("üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (+100 Stars)", callback_data="add_stars")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
                ])
            )

        elif query.data == "buy_full":
            balance = get_user_balance(user_id)
            if balance >= PRICE:
                update_user_balance(user_id, -PRICE)
                await query.edit_message_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é...")

                try:
                    full_pdf = await process_pdf_file(context.user_data['pdf'], DEFAULT_SETTINGS)
                    await context.bot.send_document(
                        chat_id=user_id,
                        document=full_pdf,
                        filename=f"enhanced_{context.user_data['filename']}"
                    )
                    await query.edit_message_text(
                        f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–ø–∏—Å–∞–Ω–æ {PRICE} Stars\n"
                        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance - PRICE} Stars\n\n"
                        "–ù–∞–ø–∏—à–∏—Ç–µ /start –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å –µ—â—ë!",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª", callback_data="start")]
                        )
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                    await query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="start")]
                        )
                    )
                    else:
                    await query.edit_message_text(
                        f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars. –ù—É–∂–Ω–æ {PRICE}, —É –≤–∞—Å {balance}",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (+100 Stars)", callback_data="add_stars")],
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
                        ])
                    )

                    elif query.data == "add_stars":
                    update_user_balance(user_id, 100)
                    await query.edit_message_text(
                        "‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100 Stars!",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
                        ])
                    )

                    elif query.data == "back":
                    await query.edit_message_text(
                        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª", callback_data="start_processing")],
                            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
                            [InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help")]
                        ])
                    )

                    elif query.data == "help":
                    await query.edit_message_text(
                        "‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n\n"
                        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª —Å —Ä—É–∫–æ–ø–∏—Å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º\n"
                        "2. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É'\n"
                        "3. –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–µ–≤—å—é –ø–µ—Ä–≤—ã—Ö 5 —Å—Ç—Ä–∞–Ω–∏—Ü\n"
                        "4. –î–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è Stars\n\n"
                        "–°–æ–≤–µ—Ç—ã:\n"
                        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50 –ú–ë\n"
                        "‚Ä¢ –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://www.ilovepdf.com/split_pdf\n"
                        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
                        ])
                    )

                    elif query.data == "start":
                    await start(update, context)

                    async

                    def text_handler(update: Update, context: CallbackContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            text = update.message.text.lower()
            if text in ['–ø—Ä–∏–≤–µ—Ç', 'start', '–Ω–∞—á–∞—Ç—å', '–º–µ–Ω—é']:
                await start(update, context)
            else:
                await update.message.reply_text(
                    "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã –∏ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é.\n"
                    "–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("/start", callback_data="start")]
                    ])
                )

        def main():
            """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
            init_db()
            app = Application.builder().token(TOKEN).build()

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            app.add_handler(CommandHandler("start", start))

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            app.add_handler(MessageHandler(filters.Document.PDF, handle_document))
            app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
            app.add_handler(CallbackQueryHandler(button_handler))

            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            app.run_polling()

        if __name__ == "__main__":
            main()